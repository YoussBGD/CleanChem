import streamlit as st
import pandas as pd
import numpy as np
from rdkit import Chem
from rdkit.Chem import AllChem, Draw, SaltRemover, MolStandardize
import base64
from io import StringIO
import io
import tempfile
import subprocess
import os
import psutil
import gc
import time
import pickle
import tempfile
import shutil

# Configuration de la page
st.set_page_config(
    page_title="Nettoyeur de Chimioth√®ques",
    page_icon="üíä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Masquer le "0" en haut de la page
st.markdown("""
<style>
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
    .stDeployButton {display:none;}
    header {visibility: hidden;}
</style>
""", unsafe_allow_html=True)

def mol_to_img(mol, size=(300, 200)):
    """Convertit une mol√©cule RDKit en image PNG encod√©e en base64"""
    if mol is None:
        return None
    
    try:
        img = Draw.MolToImage(mol, size=size)
        buffered = io.BytesIO()
        img.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()
        return img_str
    except Exception as e:
        print(f"Erreur lors de la conversion en image: {e}")
        return None

def validate_smiles(smiles):
    """V√©rifie si un SMILES est valide en essayant de le convertir en mol√©cule RDKit"""
    try:
        mol = Chem.MolFromSmiles(smiles)
        if mol is None:
            return False
        return True
    except:
        return False

def get_largest_fragment(mol):
    """Retourne le plus grand fragment d'une mol√©cule contenant plusieurs fragments"""
    if mol is None:
        return None
    
    frags = Chem.GetMolFrags(mol, asMols=True, sanitizeFrags=True)
    
    if len(frags) <= 1:
        return mol
    
    # Trouver le fragment avec le plus grand nombre d'atomes
    largest_frag = None
    max_atoms = 0
    
    for frag in frags:
        num_atoms = frag.GetNumAtoms()
        if num_atoms > max_atoms:
            max_atoms = num_atoms
            largest_frag = frag
    
    return largest_frag

def has_nonmedicinal_atoms(mol):
    """V√©rifie si la mol√©cule contient des atomes autres que ceux couramment utilis√©s dans les m√©dicaments"""
    # Liste des √©l√©ments couramment utilis√©s dans les m√©dicaments
    acceptable_atoms = {'C', 'H', 'O', 'N', 'S', 'P', 'F', 'Cl', 'Br', 'I'}
    
    for atom in mol.GetAtoms():
        symbol = atom.GetSymbol()
        if symbol not in acceptable_atoms:
            return True, symbol
    
    return False, None

def get_memory_usage():
    """Renvoie l'utilisation actuelle de la m√©moire en Go"""
    process = psutil.Process(os.getpid())
    mem_info = process.memory_info()
    return mem_info.rss / (1024 ** 3)  # Conversion en Go

def update_memory_display(memory_container, force=False):
    """Met √† jour l'affichage de la m√©moire utilis√©e si elle a chang√© significativement"""
    current_mem = get_memory_usage()
    
    # Mettre √† jour seulement si la valeur a chang√© significativement ou si force=True
    if force or not hasattr(update_memory_display, "last_mem") or abs(current_mem - update_memory_display.last_mem) > 0.1:
        memory_container.metric(
            "M√©moire utilis√©e", 
            f"{current_mem:.2f} Go", 
            delta=f"{current_mem - update_memory_display.last_mem:.2f} Go" if hasattr(update_memory_display, "last_mem") else None
        )
        update_memory_display.last_mem = current_mem

def get_system_info():
    """R√©cup√®re les informations sur les ressources syst√®me disponibles"""
    # CPU
    cpu_count = psutil.cpu_count(logical=True)
    physical_cores = psutil.cpu_count(logical=False)
    
    # RAM
    ram_gb = round(psutil.virtual_memory().total / (1024**3), 2)
    
    return {
        "cpu_count": cpu_count,
        "physical_cores": physical_cores,
        "ram_gb": ram_gb
    }

def process_molecule(molecule_data, name_col=None, keep_largest_fragment=True, remove_salts=True, 
                    remove_nonmedicinal_atoms=True):
    """Traite une seule mol√©cule selon les √©tapes sp√©cifi√©es"""
    idx, row = molecule_data
    smiles = row['SMILES'] if 'SMILES' in row else row.iloc[0]
    mol_name = row[name_col] if name_col else f"Mol_{idx}"
    
    issues = []
    
    # Initialiser les compteurs pour cette mol√©cule
    molecule_counters = {
        "invalid_smiles": 0,
        "special_atoms": 0,
        "nonmedicinal_atoms": 0,
        "salts_removed": 0,
        "fragments_removed": 0
    }
    
    # 1. Conversion initiale SMILES -> Mol
    original_mol = Chem.MolFromSmiles(smiles)
    if original_mol is None:
        # Mol√©cule avec SMILES invalide (erreur syntaxique)
        return {
            "idx": idx,
            "name": mol_name,
            "success": False,
            "issues": ["SMILES invalide"],
            "counters": {"invalid_smiles": 1},
            "error_type": "invalid_smiles",
            "original_smiles": smiles  # Conserver le SMILES original sans modification
        }
    
    # Conserver la mol√©cule originale pour la comparaison
    mol_original = Chem.Mol(original_mol)
    
    # Compter les fragments de la mol√©cule originale pour l'information
    frags = Chem.GetMolFrags(original_mol, asMols=False)
    frag_count = len(frags)
    has_multiple_fragments = frag_count > 1
    
    # Travailler avec une copie
    mol = Chem.Mol(original_mol)
    
    # 2. Suppression des sels et solvants 
    has_salts = False
    if remove_salts:
        try:
            # Initialiser le remover de sels
            salt_remover = SaltRemover.SaltRemover()
            
            # V√©rifier le nombre d'atomes avant
            atoms_before = mol.GetNumAtoms()
            
            res = salt_remover.StripMol(mol)
            
            # V√©rifier le nombre d'atomes apr√®s
            atoms_after = res.GetNumAtoms()
            
            if atoms_after != atoms_before:
                has_salts = True
                molecule_counters["salts_removed"] += 1
                issues.append(f"Sels/solvants supprim√©s ({atoms_before-atoms_after} atomes)")
            
            mol = res
        except Exception as e:
            issues.append(f"Erreur lors de la suppression des sels: {str(e)}")
    
    # 3. Traitement des fragments multiples apr√®s la suppression des sels
    # V√©rifier si apr√®s suppression des sels, il reste encore plusieurs fragments
    frag_count_after = len(Chem.GetMolFrags(mol, asMols=False))
    if frag_count_after > 1 and keep_largest_fragment:
        largest_frag = get_largest_fragment(mol)
        if largest_frag:
            mol = largest_frag
            molecule_counters["fragments_removed"] += 1
            issues.append(f"Fragments supprim√©s ({frag_count_after} fragments)")
    
    # 4. √âlimination des mol√©cules avec atomes exotiques 
    if remove_nonmedicinal_atoms:
        has_nonmed, nonmed_atom = has_nonmedicinal_atoms(mol)
        if has_nonmed:
            molecule_counters["nonmedicinal_atoms"] = 1
            issues.append(f"Atome exotique d√©tect√©: {nonmed_atom}")
            return {
                "idx": idx,
                "name": mol_name,
                "success": False,
                "issues": issues,
                "counters": molecule_counters,
                "error_type": "exotic_atom",
                "exotic_atom": nonmed_atom,
                "original_smiles": smiles  # Conserver le SMILES original sans modification
            }
    
    # 5. G√©n√©ration du SMILES canonique et isom√©rique
    canonical_smiles = Chem.MolToSmiles(mol, isomericSmiles=True, canonical=True)
    
    # 6. D√©tection et correction des atomes sp√©ciaux (isotopes)
    has_special_atoms = False
    for atom in mol.GetAtoms():
        # V√©rifier les isotopes
        if atom.GetIsotope() > 0:
            has_special_atoms = True
            issues.append(f"Atome isotopique: {atom.GetSymbol()}{atom.GetIsotope()}")
    
    if has_special_atoms:
        molecule_counters["special_atoms"] += 1
        
        # Corriger les atomes sp√©ciaux (remplacer par les atomes standards)
        mol_fixed = Chem.Mol(mol)
        for atom in mol_fixed.GetAtoms():
            if atom.GetIsotope() > 0:
                atom.SetIsotope(0)
        
        # Mettre √† jour le SMILES canonique apr√®s correction
        mol = mol_fixed
        canonical_smiles = Chem.MolToSmiles(mol, isomericSmiles=True, canonical=True)
    
    # Retourner les r√©sultats du traitement
    result = {
        "idx": idx,
        "name": mol_name,
        "success": True,
        "original_smiles": smiles,
        "canonical_smiles": canonical_smiles,
        "special_atoms": has_special_atoms,
        "fragment_count": frag_count,
        "has_multiple_fragments": has_multiple_fragments,
        "has_salts": has_salts,
        "issues": issues,
        "counters": molecule_counters
    }
    
    return result

def clean_molecular_library_streaming(df, options, batch_size=10000, name_col=None, progress_bar=None, status_text=None, memory_metric=None, output_prefix="cleanchem_"):
    """
    Version optimis√©e pour le traitement de grandes biblioth√®ques mol√©culaires
    avec √©criture progressive des r√©sultats et meilleure gestion de la m√©moire
    """
    # Imports n√©cessaires pour la base de donn√©es
    import sqlite3
    import hashlib
    
    # Cr√©er un dossier pour les r√©sultats dans le r√©pertoire courant
    output_dir = os.path.join(os.getcwd(), f"{output_prefix}results")
    os.makedirs(output_dir, exist_ok=True)
    
    # Cr√©er un dossier temporaire pour d'√©ventuels traitements interm√©diaires
    temp_dir = tempfile.mkdtemp()
    
    # D√©terminer le nombre de lots
    total_mols = len(df)
    num_batches = (total_mols + batch_size - 1) // batch_size
    
    if status_text is not None:
        status_text.text(f"Initialisation du traitement pour {total_mols} mol√©cules...")
        status_text.text(f"Les r√©sultats seront sauvegard√©s dans: {output_dir}")
    else:
        print(f"Initialisation du traitement pour {total_mols} mol√©cules...")
        print(f"Les r√©sultats seront sauvegard√©s dans: {output_dir}")
    
    # Pr√©parer les fichiers de sortie finaux
    final_files = {
        "cleaned": os.path.join(output_dir, "molecules_finales.csv"),
        "invalid": os.path.join(output_dir, "molecules_invalides.csv"),
        "exotic_atoms": os.path.join(output_dir, "molecules_atomes_exotiques.csv"),
        "special_atoms": os.path.join(output_dir, "molecules_isotopes.csv"),
        "duplicates": os.path.join(output_dir, "molecules_similaires.csv"),
        "fragments": os.path.join(output_dir, "molecules_fragments.csv")
    }
    
    # Initialiser les compteurs globaux
    global_counters = {
        "invalid_smiles": 0,
        "special_atoms": 0,
        "nonmedicinal_atoms": 0,
        "salts_removed": 0,
        "fragments_removed": 0,
        "duplicates": 0,
        "multi_fragments": 0
    }
    
    # Initialiser les fichiers avec leurs en-t√™tes
    with open(final_files["cleaned"], 'w', encoding='utf-8') as f:
        f.write("Name,Original_SMILES,SMILES_Final,Issues\n")
    
    with open(final_files["invalid"], 'w', encoding='utf-8') as f:
        f.write("Name,Original_SMILES,Issues\n")
    
    with open(final_files["exotic_atoms"], 'w', encoding='utf-8') as f:
        f.write("Name,Original_SMILES,Exotic_Atom,Issues\n")
    
    with open(final_files["special_atoms"], 'w', encoding='utf-8') as f:
        f.write("Name,Original_SMILES,Canonical_SMILES,Issues,Fragment_Count\n")
    
    # Initialiser le fichier des doublons avec son en-t√™te modifi√©
    with open(final_files["duplicates"], 'w', encoding='utf-8') as f:
        f.write("ID,Original_SMILES,SMILES_Final,Similar_To_ID,Similar_To_Original_SMILES,Similar_To_SMILES_Final,Type\n")
    
    # Nouveau fichier pour les mol√©cules avec fragments ou ions
    with open(final_files["fragments"], 'w', encoding='utf-8') as f:
        f.write("Name,Original_SMILES,Cleaned_SMILES,Fragment_Count,Type\n")
    
    # Pour stocker un √âCHANTILLON de mol√©cules pour visualisation (limit√©)
    MAX_SAMPLE_MOLS = 100  # Limiter l'√©chantillon pour √©conomiser la m√©moire
    mol_pairs = []
    
    # Initialisation du syst√®me hybride de d√©tection des doublons
    # 1. Cache en m√©moire des mol√©cules r√©centes pour v√©rification rapide
    recent_smiles_cache = {}
    CACHE_SIZE = 50000  # Garder les 50K derni√®res mol√©cules en m√©moire
    
    # 2. Base de donn√©es SQLite pour le stockage persistant efficace
    db_path = os.path.join(temp_dir, "smiles_database.db")
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Cr√©er la table avec un index sur les SMILES canoniques
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS seen_smiles (
        smiles_hash TEXT PRIMARY KEY,
        canonical_smiles TEXT,
        name TEXT,
        original_smiles TEXT
    )
    ''')
    # Cr√©er l'index pour des recherches rapides
    cursor.execute('CREATE INDEX IF NOT EXISTS idx_smiles ON seen_smiles(smiles_hash)')
    conn.commit()
    
    # Widget pour afficher les statistiques en temps r√©el
    if 'st' in globals():
        stats_container = st.empty()
    
    # Traiter chaque lot et √©crire les r√©sultats au fur et √† mesure
    for batch_idx in range(num_batches):
        # Calculer les indices de d√©but et fin
        start_idx = batch_idx * batch_size
        end_idx = min((batch_idx + 1) * batch_size, total_mols)
        
        # Mettre √† jour la progression
        progress = (batch_idx + 1) / num_batches
        if progress_bar is not None:
            progress_bar.progress(progress)
        
        if status_text is not None:
            status_text.text(f"Traitement du lot {batch_idx + 1}/{num_batches} (mol√©cules {start_idx + 1}-{end_idx} sur {total_mols})")
        else:
            print(f"Traitement du lot {batch_idx + 1}/{num_batches} (mol√©cules {start_idx + 1}-{end_idx} sur {total_mols})")
        
        # Afficher l'utilisation de la m√©moire
        if memory_metric is not None:
            update_memory_display(memory_metric, force=True)
        
        # Extraire le lot
        batch_df = df.iloc[start_idx:end_idx].copy()
        
        # Pr√©parer les donn√©es pour le traitement
        molecule_data = [(idx, row) for idx, row in batch_df.iterrows()]
        
        # Pour stocker les r√©sultats de ce lot
        batch_results = []
        
        # Traiter chaque mol√©cule du lot
        for mol_data in molecule_data:
            result = process_molecule(
                mol_data,
                name_col,
                options["keep_largest_fragment"],
                options["remove_salts"],
                options["remove_nonmedicinal_atoms"]
            )
            batch_results.append(result)
        
        # Traiter et √©crire les r√©sultats imm√©diatement en utilisant une transaction pour la BD
        conn.execute('BEGIN TRANSACTION')
        try:
            for result in batch_results:
                idx = result["idx"]
                name = result["name"]
                
                # Mettre √† jour les compteurs
                for key, value in result["counters"].items():
                    if key in global_counters:
                        global_counters[key] += value
                
                if result["success"]:
                    canonical_smiles = result["canonical_smiles"]
                    original_smiles = result["original_smiles"]
                    
                    # Enregistrer les mol√©cules avec fragments ou ions
                    if result.get("has_multiple_fragments", False) or result.get("has_salts", False):
                        global_counters["multi_fragments"] += 1
                        
                        with open(final_files["fragments"], 'a', encoding='utf-8') as f:
                            fragment_type = "ions_et_fragments" if result.get("has_salts", False) and result.get("has_multiple_fragments", False) else \
                                            "fragments" if result.get("has_multiple_fragments", False) else "ions"
                            f.write(f"{name},{original_smiles},{canonical_smiles},{result.get('fragment_count', 0)},{fragment_type}\n")
                    
                    # V√©rifier si c'est un doublon
                    is_duplicate = False
                    similar_info = None
                    
                    if options["remove_duplicates"]:
                        # Calculer un hash du SMILES pour des recherches plus rapides
                        smiles_hash = hashlib.md5(canonical_smiles.encode()).hexdigest()
                        
                        # 1. V√©rifier d'abord dans le cache m√©moire (rapide)
                        if smiles_hash in recent_smiles_cache:
                            is_duplicate = True
                            similar_info = recent_smiles_cache[smiles_hash]
                        else:
                            # 2. Si non trouv√©, v√©rifier dans la base de donn√©es
                            cursor.execute('SELECT name, original_smiles, canonical_smiles FROM seen_smiles WHERE smiles_hash = ?', (smiles_hash,))
                            db_result = cursor.fetchone()
                            
                            if db_result:
                                is_duplicate = True
                                similar_info = db_result
                            else:
                                # 3. Si nouveau, ajouter √† la base de donn√©es et au cache
                                cursor.execute('INSERT INTO seen_smiles VALUES (?, ?, ?, ?)', 
                                            (smiles_hash, canonical_smiles, name, original_smiles))
                                
                                # Ajouter au cache m√©moire
                                recent_smiles_cache[smiles_hash] = (name, original_smiles, canonical_smiles)
                                
                                # Maintenir la taille du cache
                                if len(recent_smiles_cache) > CACHE_SIZE:
                                    # Supprimer les plus anciens √©l√©ments (20% du cache)
                                    keys_to_remove = list(recent_smiles_cache.keys())[:int(CACHE_SIZE * 0.2)]
                                    for key in keys_to_remove:
                                        del recent_smiles_cache[key]
                        
                        # Compter et √©crire les doublons
                        if is_duplicate:
                            global_counters["duplicates"] += 1
                            with open(final_files["duplicates"], 'a', encoding='utf-8') as f:
                                similar_id, similar_orig_smiles, similar_final_smiles = similar_info
                                f.write(f"{name},{original_smiles},{canonical_smiles},{similar_id},{similar_orig_smiles},{similar_final_smiles},structure_identique\n")
                    
                    if not is_duplicate or not options["remove_duplicates"]:
                        # √âcrire dans le fichier principal
                        issues = "; ".join(result["issues"])
                        
                        with open(final_files["cleaned"], 'a', encoding='utf-8') as f:
                            f.write(f"{name},{original_smiles},{canonical_smiles},{issues}\n")
                        
                    # Si la mol√©cule a des atomes sp√©ciaux, l'√©crire dans le fichier correspondant
                    if result.get("special_atoms", False):
                        with open(final_files["special_atoms"], 'a', encoding='utf-8') as f:
                            issues = "; ".join(result["issues"])
                            fragment_count = result.get("fragment_count", 0)
                            f.write(f"{name},{original_smiles},{canonical_smiles},{issues},{fragment_count}\n")
                    
                    # Stocker seulement un √©chantillon limit√© pour visualisation
                    if len(mol_pairs) < MAX_SAMPLE_MOLS:
                        mol_pair = {
                            "name": name,
                            "original_smiles": original_smiles,
                            "cleaned_smiles": canonical_smiles,
                            "issues": result["issues"]
                        }
                        mol_pairs.append(mol_pair)
                
                else:
                    # √âcrire les mol√©cules invalides en fonction du type d'erreur
                    original_smiles = result["original_smiles"]  # SMILES original sans modification
                    issues = "; ".join(result["issues"])
                    
                    # √âcrire dans le fichier g√©n√©ral des mol√©cules invalides
                    with open(final_files["invalid"], 'a', encoding='utf-8') as f:
                        f.write(f"{name},{original_smiles},{issues}\n")
                    
                    # En plus, √©crire dans le fichier sp√©cifique si c'est un atome exotique
                    if "error_type" in result and result["error_type"] == "exotic_atom":
                        with open(final_files["exotic_atoms"], 'a', encoding='utf-8') as f:
                            exotic_atom = result.get("exotic_atom", "")
                            f.write(f"{name},{original_smiles},{exotic_atom},{issues}\n")
            
            # Valider la transaction
            conn.commit()
        except Exception as e:
            # En cas d'erreur, annuler la transaction
            conn.rollback()
            raise e
        
        # Afficher les statistiques en temps r√©el si on est dans Streamlit
        if 'st' in globals() and 'stats_container' in locals():
            with stats_container.container():
                col1, col2, col3, col4 = st.columns(4)
                col1.metric("Mol√©cules trait√©es", f"{min(end_idx, total_mols)}/{total_mols}")
                col2.metric("SMILES invalides", f"{global_counters['invalid_smiles']}")
                col3.metric("Atomes exotiques", f"{global_counters['nonmedicinal_atoms']}")
                col4.metric("Doublons identifi√©s", f"{global_counters['duplicates']}")
                
                col1, col2, col3 = st.columns(3)
                col1.metric("Mol√©cules avec isotopes", f"{global_counters['special_atoms']}")
                col2.metric("Fragments/ions", f"{global_counters['multi_fragments']}")
                col3.metric("Sels supprim√©s", f"{global_counters['salts_removed']}")
                
                # Afficher aussi la m√©moire
                mem_usage = get_memory_usage()
                st.caption(f"M√©moire utilis√©e: {mem_usage:.2f} Go")
        
        # Lib√©rer la m√©moire de mani√®re agressive
        del batch_df
        for result in batch_results:
            # Assurer la lib√©ration des objets RDKit
            if "mol" in result:
                del result["mol"]
        del batch_results
        
        # Forcer le garbage collector apr√®s chaque lot
        gc.collect()
    
    # Afficher les statistiques finales
    if status_text is not None:
        status_text.text(f"Traitement termin√©. Les r√©sultats sont sauvegard√©s dans: {output_dir}")
    else:
        print(f"Traitement termin√©. Les r√©sultats sont sauvegard√©s dans: {output_dir}")
    
    # Fermer la connexion √† la base de donn√©es
    conn.close()
    
    # Nettoyer les fichiers temporaires
    if os.path.exists(db_path):
        os.remove(db_path)
    shutil.rmtree(temp_dir)
    
    # Lib√©ration finale
    gc.collect()
    
    return global_counters, final_files, mol_pairs, output_dir


def save_large_dataframe(df, file_path, sep=",", batch_size=50000):
    """Sauvegarde un grand DataFrame par lots pour √©conomiser la m√©moire"""
    # Nombre total de lignes
    total_rows = len(df)
    
    # Ouvrir le fichier pour √©criture
    with open(file_path, 'w', encoding='utf-8') as f:
        # √âcrire l'en-t√™te
        f.write(sep.join(df.columns) + '\n')
        
        # √âcrire les donn√©es par lots
        for start_idx in range(0, total_rows, batch_size):
            end_idx = min(start_idx + batch_size, total_rows)
            batch = df.iloc[start_idx:end_idx]
            
            # Convertir le batch en CSV sans en-t√™te
            batch_csv = batch.to_csv(index=False, header=False, sep=sep)
            
            # √âcrire dans le fichier
            f.write(batch_csv)
            
            # Nettoyer la m√©moire
            del batch
            gc.collect()



def main():
    # En-t√™te de l'application
    st.title("üß™ CleanChem")
    st.write("Un outil pour standardiser et nettoyer vos collections de mol√©cules")
    
    # R√©cup√©rer les informations syst√®me
    system_info = get_system_info()

    # Afficher l'utilisation de la m√©moire
    memory_container = st.empty()
    update_memory_display(memory_container, force=True)
    
    # Barre lat√©rale pour les options
    with st.sidebar:
        st.header("Options de nettoyage")
        
        remove_salts = st.checkbox(
            "Suppression des sels et solvants", 
            value=True,
            help="Retire les contre-ions et mol√©cules de solvant",
            key="sidebar_remove_salts"
        )
        
        st.subheader("Options principales")
        keep_largest_fragment = st.checkbox(
            "Conserver uniquement le plus grand fragment", 
            value=True,
            help="Garde uniquement le plus grand fragment des mol√©cules √† fragments multiples",
            key="sidebar_largest_fragment"
        )
        
        remove_nonmedicinal_atoms = st.checkbox(
            "√âlimination des mol√©cules avec atomes exotiques", 
            value=True,
            help="Retire les mol√©cules contenant des atomes autres que C, H, O, N, S, P, F, Cl, Br, I",
            key="sidebar_nonmedicinal_atoms"
        )
        
        st.subheader("Options suppl√©mentaires")
        
        remove_duplicates = st.checkbox(
            "Traitement des doublons", 
            value=True,
            help="Identifie et supprime les mol√©cules en double",
            key="sidebar_remove_duplicates"
        )
        
        # Affichage des informations syst√®me d√©tect√©es
        st.subheader("Informations syst√®me")
        st.info(f"Syst√®me d√©tect√©: {system_info['physical_cores']} c≈ìurs physiques, "
                f"{system_info['cpu_count']} threads, "
                f"{system_info['ram_gb']} Go RAM")
        
        # Options de performance
        st.subheader("Options de performance")
        batch_size = st.select_slider(
            "Taille des lots (mol√©cules)",
            options=[1000, 2500, 5000, 10000, 25000, 50000, 100000],
            value=10000,
            help="Nombre de mol√©cules trait√©es par lot. Utilisez des valeurs plus petites si vous manquez de m√©moire.",
            key="sidebar_batch_size"
        )
        
        st.subheader("Options d'affichage")
        show_images = st.checkbox(
            "Afficher les images des mol√©cules", 
            value=True,
            help="G√©n√©rer des repr√©sentations visuelles des mol√©cules",
            key="sidebar_show_images"
        )
    
    # Cr√©ation des onglets
    tabs = st.tabs(["üß™‚ú® Nettoyage", "üîç Comparaison", "üìñ Documentation"])
    
    with tabs[0]:  # Onglet Nettoyage
    
        st.header("Importation et nettoyage")
        
        # Upload du fichier
        st.info("Importez votre fichier CSV ou TXT contenant les SMILES √† traiter")
        uploaded_file = st.file_uploader(
            "Choisissez un fichier CSV ou TXT avec des SMILES", 
            type=["csv", "txt"],
            key="cleantab_file_uploader"
        )
        
        if uploaded_file is not None:
            try:
                # Options de s√©parateur communes √† tous les formats
                separators = {
                    ",": "Virgule (,)",
                    ";": "Point-virgule (;)",
                    "\t": "Tabulation (\\t)",
                    "|": "Barre verticale (|)",
                    " ": "Espace"
                }
                selected_sep = st.selectbox(
                    "S√©lectionnez le s√©parateur", 
                    list(separators.values()), 
                    index=0,
                    key="cleantab_separator"
                )
                sep = list(separators.keys())[list(separators.values()).index(selected_sep)]
                
                # D√©terminer le format et lire le fichier
                if uploaded_file.name.endswith('.csv'):
                    # Lire d'abord quelques lignes pour afficher un aper√ßu
                    preview_df = pd.read_csv(uploaded_file, sep=sep, nrows=5)
                    st.success(f"Fichier CSV d√©tect√©. Lecture en cours...")
                    
                    # R√©initialiser le curseur pour la lecture compl√®te
                    uploaded_file.seek(0)
                    
                    # Afficher un aper√ßu des donn√©es
                    st.subheader("Aper√ßu des donn√©es")
                    st.dataframe(preview_df)
                    
                    # S√©lectionner la colonne contenant les SMILES
                    col_options = preview_df.columns.tolist()
                    smiles_col = st.selectbox(
                        "S√©lectionnez la colonne contenant les SMILES", 
                        col_options,
                        key="cleantab_csv_smiles_col"
                    )
                    
                    # S√©lectionner la colonne contenant les noms (optionnel)
                    name_col = st.selectbox(
                        "S√©lectionnez la colonne contenant les noms (optionnel)", 
                        ['Aucune'] + col_options,
                        key="cleantab_csv_name_col"
                    )
                    if name_col == 'Aucune':
                        name_col = None
                    
                    # Ajouter un bouton pour confirmer et charger le fichier complet
                    if st.button(
                        "Charger le fichier complet",
                        key="cleantab_csv_load_button"
                    ):
                        with st.spinner("Chargement du fichier en cours..."):
                            # Charger tout le fichier
                            df = pd.read_csv(uploaded_file, sep=sep)
                            
                            # S'assurer que la colonne SMILES est pr√©sente
                            if smiles_col not in df.columns:
                                st.error(f"La colonne {smiles_col} n'existe pas dans le fichier.")
                                return
                            
                            # Renommer la colonne SMILES pour traitement uniforme
                            if smiles_col != 'SMILES':
                                df = df.rename(columns={smiles_col: 'SMILES'})
                            
                            st.success(f"Fichier CSV import√© avec succ√®s! {len(df)} lignes d√©tect√©es.")
                            
                            # Stocker dans la session state
                            st.session_state['input_df'] = df
                            st.session_state['name_col'] = name_col
                            # R√©initialiser l'√©tat des r√©sultats
                            if 'has_results' in st.session_state:
                                st.session_state['has_results'] = False
                
                else:  # txt file
                    # Lire les premi√®res lignes pour l'aper√ßu
                    content = uploaded_file.read(1024).decode()
                    
                    # V√©rifier si le contenu contient le s√©parateur
                    lines_preview = content.strip().split('\n')[:5]
                    
                    # Essayer de diviser chaque ligne selon le s√©parateur choisi
                    preview_data = []
                    for line in lines_preview:
                        preview_data.append(line.split(sep))
                    
                    # Cr√©er un DataFrame pour l'aper√ßu
                    preview_df = pd.DataFrame(preview_data)
                    
                    # Si la premi√®re ligne semble √™tre un en-t√™te (v√©rifie si elle contient "SMILES" ou similaire)
                    has_header = any("SMILES" in str(col).upper() for col in preview_data[0] if col)
                    
                    if has_header:
                        # Utiliser la premi√®re ligne comme en-t√™te
                        preview_df.columns = preview_data[0]
                        preview_df = preview_df.iloc[1:]
                    
                    # R√©initialiser pour la lecture compl√®te
                    uploaded_file.seek(0)
                    
                    # Afficher l'aper√ßu
                    st.subheader("Aper√ßu des donn√©es")
                    st.dataframe(preview_df)
                    
                    # Demander √† l'utilisateur si le fichier a un en-t√™te
                    header_option = st.checkbox(
                        "Le fichier contient une ligne d'en-t√™te", 
                        value=has_header,
                        key="cleantab_txt_header_option"
                    )
                    
                    # Si le fichier a plusieurs colonnes, demander laquelle contient les SMILES
                    if len(preview_data[0]) > 1:
                        if header_option:
                            col_options = preview_df.columns.tolist()
                            smiles_col_idx = st.selectbox(
                                "S√©lectionnez la colonne contenant les SMILES", 
                                range(len(col_options)), 
                                format_func=lambda x: col_options[x],
                                key="cleantab_txt_header_smiles_col"
                            )
                            smiles_col = col_options[smiles_col_idx]
                            
                            # S√©lectionner la colonne contenant les noms (optionnel)
                            name_options = ['Aucune'] + col_options
                            name_col_idx = st.selectbox(
                                "S√©lectionnez la colonne contenant les noms (optionnel)", 
                                range(len(name_options)), 
                                format_func=lambda x: name_options[x],
                                key="cleantab_txt_header_name_col"
                            )
                            name_col = None if name_options[name_col_idx] == 'Aucune' else name_options[name_col_idx]
                        else:
                            smiles_col_idx = st.selectbox(
                                "S√©lectionnez la colonne contenant les SMILES", 
                                range(len(preview_data[0])), 
                                format_func=lambda x: f"Colonne {x+1}",
                                key="cleantab_txt_noheader_smiles_col"
                            )
                            smiles_col = smiles_col_idx
                            
                            # S√©lectionner la colonne contenant les noms (optionnel)
                            name_options = ['Aucune'] + [f"Colonne {i+1}" for i in range(len(preview_data[0]))]
                            name_col_idx = st.selectbox(
                                "S√©lectionnez la colonne contenant les noms (optionnel)", 
                                range(len(name_options)), 
                                format_func=lambda x: name_options[x],
                                key="cleantab_txt_noheader_name_col"
                            )
                            name_col = None if name_col_idx == 0 else name_col_idx - 1
                    else:
                        smiles_col = 0
                        name_col = None
                    
                    # Ajouter un bouton pour confirmer et charger le fichier complet
                    if st.button(
                        "Charger le fichier complet",
                        key="cleantab_txt_load_button"
                    ):
                        with st.spinner("Chargement du fichier en cours..."):
                            content = uploaded_file.read().decode()
                            lines = content.strip().split('\n')
                            
                            data = []
                            for line in lines:
                                data.append(line.split(sep))
                            
                            # Cr√©er le DataFrame
                            if header_option:
                                header = data[0]
                                df = pd.DataFrame(data[1:], columns=header)
                            else:
                                df = pd.DataFrame(data)
                            
                            # Extraire la colonne SMILES et renommer
                            if isinstance(smiles_col, int):
                                # Si smiles_col est un index
                                df = df.rename(columns={df.columns[smiles_col]: 'SMILES'})
                            else:
                                # Si smiles_col est un nom de colonne
                                df = df.rename(columns={smiles_col: 'SMILES'})
                            
                            # Extraire et renommer la colonne de noms si pr√©sente
                            if name_col is not None:
                                if isinstance(name_col, int):
                                    # Si name_col est un index
                                    name_actual_col = df.columns[name_col]
                                    df = df.rename(columns={name_actual_col: 'Name'})
                                    name_col = 'Name'
                                else:
                                    # Si name_col est un nom de colonne
                                    df = df.rename(columns={name_col: 'Name'})
                                    name_col = 'Name'
                            
                            st.success(f"Fichier TXT import√© avec succ√®s! {len(df)} lignes d√©tect√©es.")
                            
                            # Stocker dans la session state
                            st.session_state['input_df'] = df
                            st.session_state['name_col'] = name_col
                            # R√©initialiser l'√©tat des r√©sultats
                            if 'has_results' in st.session_state:
                                st.session_state['has_results'] = False
                
                # Afficher un bouton pour lancer le nettoyage si le fichier est charg√©
                if 'input_df' in st.session_state:
                    df = st.session_state['input_df']
                    name_col = st.session_state['name_col']
                    
                    # Bouton pour lancer le nettoyage
                    if st.button(
                        "üß™ üßπ Nettoyer la biblioth√®que", 
                        use_container_width=True,
                        key="cleantab_process_button"
                    ):
                        # Rassembler les options de nettoyage
                        cleaning_options = {
                            "keep_largest_fragment": keep_largest_fragment,
                            "remove_salts": remove_salts,
                            "remove_nonmedicinal_atoms": remove_nonmedicinal_atoms,
                            "remove_duplicates": remove_duplicates
                        }
                        
                        with st.spinner(f"Nettoyage en cours par lots de {batch_size} mol√©cules..."):
                            # Pr√©parer des conteneurs pour afficher la progression
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            memory_metric = st.empty()  

                            # Effectuer le nettoyage streaming
                            start_time = time.time()
                            global_counters, final_files, mol_pairs, output_dir = clean_molecular_library_streaming(
                                df,
                                cleaning_options,
                                batch_size=batch_size,
                                name_col=name_col,
                                progress_bar=progress_bar,
                                status_text=status_text,
                                memory_metric=memory_metric
                            )
                            
                            # Calculer le temps de traitement
                            duration = time.time() - start_time
                            hours, remainder = divmod(duration, 3600)
                            minutes, seconds = divmod(remainder, 60)
                            
                            # Nettoyer la m√©moire
                            del df
                            gc.collect()
                            
                            # Stocker les r√©sultats dans la session state
                            st.session_state['output_dir'] = output_dir
                            st.session_state['final_files'] = final_files
                            st.session_state['mol_pairs'] = mol_pairs
                            st.session_state['global_counters'] = global_counters
                            st.session_state['has_results'] = True
                            
                            # Vider les indicateurs de progression
                            progress_bar.empty()
                            status_text.empty()
                            
                            # Afficher message de succ√®s et statistiques
                            st.success(f"‚úÖ Nettoyage termin√© avec succ√®s en {int(hours)}h {int(minutes)}m {int(seconds)}s!")
                            
                            # Afficher les r√©sultats
                            st.header("R√©sultats du nettoyage")
                            
                            # Calculer le nombre total de mol√©cules finales
                            input_size = len(st.session_state['input_df'])
                            invalid_smiles_count = global_counters['invalid_smiles']  # Uniquement les SMILES invalides
                            exotic_atoms_count = global_counters['nonmedicinal_atoms']  # Uniquement les atomes exotiques
                            duplicates_count = global_counters['duplicates']
                            
                            # Nombre de mol√©cules valides = total initial - (invalides + exotiques) - doublons
                            valid_molecules = input_size - (invalid_smiles_count + exotic_atoms_count) - duplicates_count
                            final_molecules = valid_molecules
                            
                            # Afficher un r√©sum√© am√©lior√© visuellement avec des statistiques plus pr√©cises
                            st.subheader("Bilan des mol√©cules")
                            
                            # Premi√®re ligne de m√©triques : volumes de mol√©cules
                            col1, col2, col3 = st.columns(3)
                            col1.metric("Mol√©cules import√©es", f"{input_size}")
                            col2.metric("Mol√©cules finales", f"{final_molecules}", 
                                      delta=f"{final_molecules - input_size}" if final_molecules != input_size else None)
                            col3.metric("Taux de conservation", f"{(final_molecules / input_size * 100):.1f}%")
                            
                            # Seconde ligne de m√©triques : d√©tails des probl√®mes
                            col1, col2, col3, col4 = st.columns(4)
                            col1.metric("SMILES invalides", f"{invalid_smiles_count}")  # Renomm√© pour clarifier
                            col2.metric("Atomes exotiques", f"{exotic_atoms_count}")    # S√©par√© clairement
                            col3.metric("Doublons identifi√©s", f"{duplicates_count}")
                            col4.metric("Mol√©cules avec isotopes", f"{global_counters['special_atoms']}")
                            
                            # Troisi√®me ligne de m√©triques : d√©tails des transformations
                            col1, col2, col3 = st.columns(3)
                            col1.metric("Mol√©cules avec ions/fragments", f"{global_counters['multi_fragments']}")
                            col2.metric("Sels supprim√©s", f"{global_counters['salts_removed']}")
                            col3.metric("Fragments supprim√©s", f"{global_counters['fragments_removed']}")
                            
                            # D√©tails suppl√©mentaires
                            with st.expander("D√©tails complets du traitement"):
                                # Premi√®re colonne : statistiques des mol√©cules
                                stats_col1, stats_col2 = st.columns(2)
                                
                                with stats_col1:
                                    st.subheader("Statistiques des mol√©cules")
                                    st.markdown(f"""
                                    - **Mol√©cules import√©es:** {input_size}
                                    - **Mol√©cules valides:** {valid_molecules} ({valid_molecules/input_size*100:.1f}%)
                                    - **Total mol√©cules finales:** {final_molecules}
                                    - **SMILES invalides:** {invalid_smiles_count} ({invalid_smiles_count/input_size*100:.1f}%)
                                    - **Mol√©cules avec atomes exotiques:** {exotic_atoms_count} ({exotic_atoms_count/input_size*100:.1f}%)
                                    - **Doublons identifi√©s:** {duplicates_count} ({duplicates_count/input_size*100:.1f}%)
                                    """)
                                
                                # Deuxi√®me colonne : statistiques des transformations
                                with stats_col2:
                                    st.subheader("Statistiques des transformations")
                                    st.markdown(f"""
                                    - **Mol√©cules avec ions/fragments:** {global_counters['multi_fragments']}
                                    - **Fragments supprim√©s:** {global_counters['fragments_removed']}
                                    - **Sels/solvants supprim√©s:** {global_counters['salts_removed']}
                                    - **Mol√©cules avec isotopes:** {global_counters['special_atoms']}
                                    """)
                            
                            # Information sur l'emplacement des fichiers sauvegard√©s
                            st.subheader("Fichiers sauvegard√©s")
                            st.info(f"""
                            Tous les fichiers ont √©t√© sauvegard√©s dans le dossier: **{output_dir}**

                            Fichiers g√©n√©r√©s:
                            - molecules_finales.csv - **{final_molecules} mol√©cules** nettoy√©es
                            - molecules_invalides.csv - **{invalid_smiles_count} SMILES** qui n'ont pas pu √™tre trait√©s (syntaxe/valence invalide)
                            - molecules_atomes_exotiques.csv - **{exotic_atoms_count} mol√©cules** contenant des atomes non m√©dicinaux
                            - molecules_isotopes.csv - **{global_counters['special_atoms']} mol√©cules** qui contenaient des isotopes
                            - molecules_similaires.csv - **{duplicates_count} mol√©cules** identifi√©es comme doublons
                            - molecules_fragments.csv - **{global_counters['multi_fragments']} mol√©cules** avec ions/fragments
                            """)
                            
                            # Inviter l'utilisateur √† consulter l'onglet de comparaison
                            st.info("Consultez l'onglet 'Comparaison' pour visualiser les changements avant/apr√®s nettoyage")
            
            except Exception as e:
                st.error(f"Erreur lors du traitement du fichier: {e}")
                st.exception(e)
                
            # Mise √† jour de l'utilisation de la m√©moire
            update_memory_display(memory_container, force=True)

    with tabs[1]:  # Onglet Comparaison
        st.header("Comparaison des mol√©cules avant/apr√®s nettoyage")
        
        if 'has_results' not in st.session_state or not st.session_state['has_results']:
            st.info("Aucun r√©sultat de nettoyage disponible. Veuillez d'abord nettoyer une biblioth√®que dans l'onglet 'Nettoyage'.")
        else:
            if 'final_files' in st.session_state:
                final_files = st.session_state['final_files']
                
                # Proposer une visualisation directe ou √† partir d'un fichier charg√©
                view_option = st.radio(
                    "Source des mol√©cules √† visualiser",
                    ["Visualiser les mol√©cules du traitement en cours", "Charger un fichier de r√©sultats pr√©c√©dent"],
                    index=0,
                    key="view_option_radio"
                )
                
                if view_option == "Charger un fichier de r√©sultats pr√©c√©dent":
                    # Upload d'un fichier de r√©sultats
                    uploaded_results = st.file_uploader(
                        "Choisissez un fichier CSV de r√©sultats CleanChem", 
                        type=["csv"],
                        key="compare_file_uploader"
                    )
                    
                    if uploaded_results is not None:
                        try:
                            # Lire le fichier CSV
                            df = pd.read_csv(uploaded_results)
                            st.success(f"Fichier charg√© avec succ√®s! {len(df)} mol√©cules trouv√©es.")
                            
                            # Afficher un aper√ßu des donn√©es
                            st.subheader("Aper√ßu des donn√©es")
                            st.dataframe(df.head())
                            
                            # V√©rifier les colonnes n√©cessaires
                            required_columns = ['Original_SMILES', 'SMILES_Final']
                            if not all(col in df.columns for col in required_columns):
                                st.error("Le fichier ne contient pas les colonnes requises. Veuillez vous assurer qu'il s'agit d'un fichier de sortie CleanChem valide.")
                                return
                            
                            # Options d'affichage
                            st.subheader("Options d'affichage")
                            
                            # Slider pour contr√¥ler le nombre de mol√©cules √† afficher
                            display_count = st.slider("Nombre de mol√©cules √† afficher", 
                                                    1, min(len(df), 100), 5,
                                                    help="Ajustez selon le nombre de mol√©cules que vous souhaitez visualiser simultan√©ment")
                            
                            # Option pour activer/d√©sactiver les images
                            show_images = st.checkbox("Afficher les images des mol√©cules", value=True)
                            
                            # Liste des mol√©cules disponibles
                            st.subheader("S√©lection des mol√©cules")
                            
                            if 'Name' in df.columns:
                                mol_options = df['Name'].tolist()
                                selected_mols = st.multiselect("S√©lectionnez les mol√©cules √† afficher", mol_options, mol_options[:min(display_count, len(mol_options))])
                                selected_df = df[df['Name'].isin(selected_mols)]
                            else:
                                # Utiliser l'index comme identifiant si aucun nom n'est disponible
                                df['ID'] = [f"Mol√©cule {i+1}" for i in range(len(df))]
                                mol_options = df['ID'].tolist()
                                selected_mols = st.multiselect("S√©lectionnez les mol√©cules √† afficher", mol_options, mol_options[:min(display_count, len(mol_options))])
                                selected_df = df[df['ID'].isin(selected_mols)]
                            
                            # Affichage des mol√©cules s√©lectionn√©es
                            if not selected_df.empty:
                                st.subheader("Visualisation des mol√©cules")
                                
                                for idx, row in selected_df.iterrows():
                                    st.write("---")
                                    mol_name = row.get('Name', f"Mol√©cule {idx}")
                                    st.subheader(mol_name)
                                    
                                    # Cr√©er deux colonnes pour avant/apr√®s
                                    col1, col2 = st.columns(2)
                                    
                                    # Mol√©cule originale
                                    with col1:
                                        st.markdown("**Mol√©cule originale**")
                                        original_smiles = row['Original_SMILES']
                                        st.markdown("**SMILES original :**")
                                        st.code(original_smiles, language=None)
                                        
                                        if show_images:
                                            # G√©n√©rer la mol√©cule √† la demande
                                            original_mol = Chem.MolFromSmiles(original_smiles)
                                            if original_mol:
                                                img_str = mol_to_img(original_mol)
                                                if img_str:
                                                    st.image(f"data:image/png;base64,{img_str}", use_container_width=True)
                                                else:
                                                    st.warning("Impossible de g√©n√©rer l'image")
                                            else:
                                                st.warning("SMILES invalide")
                                    
                                    # Mol√©cule nettoy√©e
                                    with col2:
                                        st.markdown("**Mol√©cule nettoy√©e**")
                                        cleaned_smiles = row['SMILES_Final']
                                        st.markdown("**SMILES nettoy√© :**")
                                        st.code(cleaned_smiles, language=None)
                                        
                                        if show_images:
                                            # G√©n√©rer la mol√©cule √† la demande
                                            cleaned_mol = Chem.MolFromSmiles(cleaned_smiles)
                                            if cleaned_mol:
                                                img_str = mol_to_img(cleaned_mol)
                                                if img_str:
                                                    st.image(f"data:image/png;base64,{img_str}", use_container_width=True)
                                                else:
                                                    st.warning("Impossible de g√©n√©rer l'image")
                                            else:
                                                st.warning("SMILES invalide")
                                    
                                    # Informations suppl√©mentaires sur la mol√©cule
                                    with st.expander("Informations suppl√©mentaires"):
                                        if 'Issues' in row and pd.notna(row['Issues']):
                                            issues = row['Issues']
                                            if issues:
                                                st.write("**Modifications effectu√©es:**")
                                                for issue in issues.split(';'):
                                                    if issue.strip():  # √âviter les cha√Ænes vides
                                                        st.write(f"- {issue.strip()}")
                                            else:
                                                st.write("Aucune modification majeure d√©tect√©e.")
                                        
                                        # Calcul de quelques propri√©t√©s mol√©culaires
                                        if show_images and 'cleaned_mol' in locals() and cleaned_mol:
                                            st.write("**Propri√©t√©s:**")
                                            try:
                                                from rdkit.Chem import Descriptors
                                                mol_weight = round(Descriptors.MolWt(cleaned_mol), 2)
                                                logp = round(Descriptors.MolLogP(cleaned_mol), 2)
                                                hbd = Descriptors.NumHDonors(cleaned_mol)
                                                hba = Descriptors.NumHAcceptors(cleaned_mol)
                                                
                                                props_col1, props_col2 = st.columns(2)
                                                props_col1.metric("Poids mol√©culaire", f"{mol_weight} g/mol")
                                                props_col1.metric("LogP", logp)
                                                props_col2.metric("Donneurs de H", hbd)
                                                props_col2.metric("Accepteurs de H", hba)
                                            except Exception as e:
                                                st.warning(f"Impossible de calculer les propri√©t√©s mol√©culaires: {e}")
                        except Exception as e:
                            st.error(f"Erreur lors du traitement du fichier: {e}")
                else:
                    # Utiliser les donn√©es du traitement en cours
                    mol_pairs = st.session_state.get('mol_pairs', [])
                    
                    if not mol_pairs:
                        st.warning("Aucune mol√©cule n'a √©t√© conserv√©e pour visualisation lors du traitement.")
                    else:
                        # Options d'affichage
                        st.subheader("Options d'affichage")
                        
                        # Slider pour contr√¥ler le nombre de mol√©cules √† afficher
                        display_count = st.slider("Nombre de mol√©cules √† afficher", 
                                               1, min(len(mol_pairs), 100), 5,
                                               help="Ajustez selon le nombre de mol√©cules que vous souhaitez visualiser simultan√©ment")
                        
                        show_images = st.checkbox("Afficher les images des mol√©cules", value=True)
                        
                        # Options de filtrage
                        filter_options = ["Toutes les mol√©cules", "Mol√©cules modifi√©es uniquement", 
                                         "Mol√©cules avec isotopes", "Mol√©cules avec sels/fragments", "Autres modifications"]
                        filter_type = st.selectbox("Filtrer par type de modification", filter_options)
                        
                        # Filtrer les paires de mol√©cules selon l'option choisie
                        filtered_pairs = []
                        
                        if filter_type == "Toutes les mol√©cules":
                            filtered_pairs = mol_pairs
                        elif filter_type == "Mol√©cules modifi√©es uniquement":
                            filtered_pairs = [pair for pair in mol_pairs if pair["original_smiles"] != pair["cleaned_smiles"] and len(pair["issues"]) > 0]
                        elif filter_type == "Mol√©cules avec isotopes":
                            filtered_pairs = [pair for pair in mol_pairs if any("isotopique" in issue for issue in pair["issues"])]
                        elif filter_type == "Mol√©cules avec sels/fragments":
                            filtered_pairs = [pair for pair in mol_pairs if any("sel" in issue.lower() or "fragment" in issue.lower() for issue in pair["issues"])]
                        elif filter_type == "Autres modifications":
                            filtered_pairs = [pair for pair in mol_pairs if pair["original_smiles"] != pair["cleaned_smiles"] and 
                                             not any(("isotopique" in issue or "sel" in issue.lower() or 
                                                     "fragment" in issue.lower()) 
                                                     for issue in pair["issues"])]
                        
                        # Si aucune mol√©cule ne correspond au filtre
                        if not filtered_pairs:
                            st.warning(f"Aucune mol√©cule ne correspond au filtre '{filter_type}'")
                        else:
                            # Limiter le nombre apr√®s filtrage selon le slider
                            display_pairs = filtered_pairs[:min(display_count, len(filtered_pairs))]
                            
                            # S√©lection des mol√©cules
                            st.subheader("S√©lection des mol√©cules")
                            
                            # Cr√©er une liste d'options pour la s√©lection
                            mol_options = []
                            for i, pair in enumerate(display_pairs):
                                name = pair.get('name', f"Mol√©cule {i+1}")
                                mol_options.append(name)
                            
                            selected_indices = st.multiselect(
                                "S√©lectionnez les mol√©cules √† afficher",
                                range(len(mol_options)),
                                range(min(display_count, len(mol_options))),
                                format_func=lambda i: mol_options[i]
                            )
                            
                            # Afficher les mol√©cules s√©lectionn√©es
                            if selected_indices:
                                st.subheader("Visualisation des mol√©cules")
                                
                                for idx in selected_indices:
                                    pair = display_pairs[idx]
                                    
                                    st.write("---")
                                    name = pair.get('name', f"Mol√©cule {idx+1}")
                                    st.subheader(name)
                                    
                                    # Cr√©er deux colonnes pour avant/apr√®s
                                    col1, col2 = st.columns(2)
                                    
                                    # Mol√©cule originale
                                    with col1:
                                        st.markdown("**Mol√©cule originale**")
                                        st.markdown("**SMILES original :**")
                                        st.code(pair['original_smiles'], language=None)
                                        
                                        if show_images:
                                            # G√©n√©rer la mol√©cule √† la demande
                                            original_mol = Chem.MolFromSmiles(pair['original_smiles'])
                                            if original_mol:
                                                img_str = mol_to_img(original_mol)
                                                if img_str:
                                                    st.image(f"data:image/png;base64,{img_str}", use_container_width=True)
                                                else:
                                                    st.warning("Impossible de g√©n√©rer l'image")
                                            else:
                                                st.warning("SMILES invalide")
                                    
                                    # Mol√©cule nettoy√©e
                                    with col2:
                                        st.markdown("**Mol√©cule nettoy√©e**")
                                        st.markdown("**SMILES nettoy√© :**")
                                        st.code(pair['cleaned_smiles'], language=None)
                                        
                                        if show_images:
                                            # G√©n√©rer la mol√©cule √† la demande
                                            cleaned_mol = Chem.MolFromSmiles(pair['cleaned_smiles'])
                                            if cleaned_mol:
                                                img_str = mol_to_img(cleaned_mol)
                                                if img_str:
                                                    st.image(f"data:image/png;base64,{img_str}", use_container_width=True)
                                                else:
                                                    st.warning("Impossible de g√©n√©rer l'image")
                                            else:
                                                st.warning("SMILES invalide")
                                    
                                    # Informations suppl√©mentaires sur la mol√©cule
                                    with st.expander("Informations suppl√©mentaires"):
                                        if "issues" in pair and pair["issues"]:
                                            st.write("**Modifications effectu√©es:**")
                                            for issue in pair["issues"]:
                                                if issue.strip():  # √âviter les cha√Ænes vides
                                                    st.write(f"- {issue.strip()}")
                                        else:
                                            st.write("Aucune modification majeure d√©tect√©e.")
                                        
                                        # Calcul de quelques propri√©t√©s mol√©culaires
                                        if show_images and 'cleaned_mol' in locals() and cleaned_mol:
                                            st.write("**Propri√©t√©s:**")
                                            try:
                                                from rdkit.Chem import Descriptors
                                                mol_weight = round(Descriptors.MolWt(cleaned_mol), 2)
                                                logp = round(Descriptors.MolLogP(cleaned_mol), 2)
                                                hbd = Descriptors.NumHDonors(cleaned_mol)
                                                hba = Descriptors.NumHAcceptors(cleaned_mol)
                                                
                                                props_col1, props_col2 = st.columns(2)
                                                props_col1.metric("Poids mol√©culaire", f"{mol_weight} g/mol")
                                                props_col1.metric("LogP", logp)
                                                props_col2.metric("Donneurs de H", hbd)
                                                props_col2.metric("Accepteurs de H", hba)
                                            except Exception as e:
                                                st.warning(f"Impossible de calculer les propri√©t√©s mol√©culaires: {e}")
            else:
                st.warning("Aucun fichier de r√©sultats disponible.")

    with tabs[2]:  # Onglet Documentation
        st.header("Documentation technique")
        
        st.info(
            "Cette application utilise RDKit pour nettoyer et standardiser des biblioth√®ques de mol√©cules, avec une optimisation m√©moire pour traiter des millions de mol√©cules."
        )
        
        st.subheader("Processus de nettoyage")
        
        # 1. Conversion initiale SMILES ‚Üí Mol ‚Üí SMILES canonique
        st.write("**1. Conversion initiale SMILES ‚Üí Mol**")
        st.markdown("""
        **Outil utilis√©:** `Chem.MolFromSmiles()` de RDKit
        
        **Processus:** Les cha√Ænes SMILES sont converties en objets mol√©culaires RDKit. Cette √©tape v√©rifie √©galement la validit√© des structures. Les mol√©cules invalides sont √©cart√©es et plac√©es dans un fichier s√©par√© pour correction ult√©rieure.
        
        **R√©sultat:** Cette √©tape permet de v√©rifier la validit√© syntaxique et chimique des SMILES fournis.
        """)
        
        # 2. Suppression des sels et solvants
        st.write("**2. Suppression des sels et solvants**")
        st.markdown("""
        **Outil utilis√©:** `SaltRemover.SaltRemover()` de RDKit
        
        **Processus:** Identifie et retire les contre-ions (Na‚Å∫, Cl‚Åª, etc.) et les mol√©cules de solvant (H‚ÇÇO, CH‚ÇÉOH, etc.) qui sont souvent inclus dans les repr√©sentations SMILES des compos√©s pharmaceutiques ou biologiques.
        
        **Exemple:** Le SMILES `CC(=O)O.[Na+]` (ac√©tate de sodium) sera transform√© en `CC(=O)O` (acide ac√©tique).
        """)
        
        # 3. Traitement des fragments multiples 
        st.write("**3. Traitement des fragments multiples**")
        st.markdown("""
        **Outil utilis√©:** `Chem.GetMolFrags()` et une fonction personnalis√©e `get_largest_fragment()`
        
        **Processus:** Apr√®s la suppression des sels et solvants, l'application identifie si la mol√©cule contient encore plusieurs fragments ind√©pendants. Dans ce cas, elle conserve uniquement le fragment ayant le plus grand nombre d'atomes, consid√©r√© comme le "compos√© principal".
        """)
        
        # 4. Suppression des mol√©cules avec atomes exotiques
        st.write("**4. Suppression des mol√©cules avec atomes exotiques**")
        st.markdown("""
        **Outil utilis√©:** Fonction personnalis√©e `has_nonmedicinal_atoms()`
        
        **Processus:** V√©rifie que la mol√©cule ne contient que des atomes couramment utilis√©s dans les m√©dicaments: C, H, O, N, S, P, F, Cl, Br, I. Les mol√©cules contenant d'autres types d'atomes sont √©cart√©es.
        
        **Exemple:** Une mol√©cule contenant du silicium (Si) ou du bore (B) sera filtr√©e car ces √©l√©ments ne font pas partie de la liste des atomes acceptables.
        """)
        
        # 5. G√©n√©ration du SMILES canonique et isom√©rique
        st.write("**5. G√©n√©ration du SMILES canonique et isom√©rique**")
        st.markdown("""
        **Outil utilis√©:** `Chem.MolToSmiles()` avec les param√®tres `isomericSmiles=True` et `canonical=True`
        
        **Processus:** Convertit l'objet mol√©culaire en une repr√©sentation SMILES canonique qui pr√©serve l'information st√©r√©ochimique (centres chiraux, doubles liaisons E/Z).
        
        **Importance:** Cette √©tape garantit une repr√©sentation coh√©rente et unique de chaque structure, tout en conservant les informations st√©r√©ochimiques essentielles pour l'activit√© biologique.
        """)
        
        # 6. D√©tection et correction des atomes sp√©ciaux
        st.write("**6. D√©tection et correction des atomes sp√©ciaux**")
        st.markdown("""
        **Outil utilis√©:** `atom.GetIsotope()` et `atom.SetIsotope(0)` de RDKit
        
        **Processus:** Chaque atome de la mol√©cule est examin√© pour d√©tecter la pr√©sence d'isotopes sp√©cifiques comme le deut√©rium (¬≤H), le carbone-13 (¬π¬≥C), l'azote-15 (¬π‚ÅµN), etc. Ces atomes sont ensuite remplac√©s par leurs versions standard.
        
        **Isotopes d√©tect√©s:**
        - Deut√©rium (¬≤H) et Tritium (¬≥H)
        - Carbone-13 (¬π¬≥C) et Carbone-14 (¬π‚Å¥C)
        - Azote-15 (¬π‚ÅµN)
        - Oxyg√®ne-17 (¬π‚Å∑O) et Oxyg√®ne-18 (¬π‚Å∏O)
        - Autres isotopes (¬≥¬≤P, ¬≥‚ÅµS, ¬π‚Å∏F, etc.)
        
        **Exemple:** Le SMILES `[2H]OC([2H])([2H])C` (√©thanol partiellement deut√©r√©) sera normalis√© en `CCO`.
        """)
        
        # 7. V√©rification finale et suppression des doublons
        st.write("**7. V√©rification finale et suppression des doublons**")
        st.markdown("""
        **Processus:** 
        - G√©n√©ration des SMILES canoniques isom√©riques apr√®s toutes les √©tapes de traitement
        - √âlimination des doublons : si deux formes deviennent identiques apr√®s traitement, une seule est conserv√©e
        
        **Importance:** Cette √©tape garantit que la biblioth√®que finale ne contient que des structures uniques, maximisant ainsi l'efficacit√© des criblages virtuels ult√©rieurs.
        """)
        
        # 8. Validation finale
        st.write("**8. Validation finale du pipeline**")
        st.markdown("""
        **Processus:**
        - Affichage du nombre total de mol√©cules uniques apr√®s nettoyage complet
        - G√©n√©ration d'un fichier d'erreurs avec les mol√©cules invalides pour correction manuelle ult√©rieure
        - Cr√©ation d'un fichier final contenant toutes les mol√©cules retenues avec leurs noms
        """)
        
        # 9. Optimisation m√©moire avec syst√®me hybride SQLite
        st.write("**9. Optimisation m√©moire pour biblioth√®ques volumineuses**")
        st.markdown("""
        **Techniques utilis√©es:**
        - **Traitement par lots:** Les mol√©cules sont trait√©es par groupes de taille configurable
        - **Syst√®me hybride de d√©tection des doublons:** 
          - Utilisation d'un cache m√©moire intelligent pour les mol√©cules r√©centes (haute performance)
          - Base de donn√©es SQLite avec indexation pour un stockage efficace des millions de structures
          - Hachage MD5 des SMILES pour des recherches ultra-rapides
          - Performance constante quelle que soit la taille de la biblioth√®que
        - **Transactions optimis√©es** pour r√©duire les op√©rations disque et maintenir des performances √©lev√©es
        - **√âcriture progressive des r√©sultats** au fur et √† mesure du traitement
        - **Nettoyage p√©riodique des structures de donn√©es** pour une utilisation m√©moire optimale
        - **Lib√©ration explicite des objets RDKit** pour pr√©venir les fuites m√©moire
        
        **Avantages:**
        - D√©tection des doublons aussi rapide avec 10 millions de mol√©cules qu'avec 10 000
        - Aucun ralentissement notable m√™me pour de tr√®s grandes biblioth√®ques
        - Utilisation m√©moire contr√¥l√©e et pr√©visible
        - Int√©gration transparente sans d√©pendances externes (utilise SQLite int√©gr√© √† Python)
        - Fiabilit√© et consistance garanties pour les grands jeux de donn√©es
        """)
        
        # 10. Fichiers de sortie g√©n√©r√©s
        st.write("**10. Fichiers de sortie g√©n√©r√©s**")
        st.markdown("""
        **Fichiers produits:**
        - **molecules_finales.csv:** Collection compl√®te des mol√©cules nettoy√©es
        - **molecules_invalides.csv:** Structures qui n'ont pas pu √™tre trait√©es correctement
        - **molecules_isotopes.csv:** Mol√©cules qui contenaient des isotopes sp√©cifiques
        - **molecules_similaires.csv:** Mol√©cules identifi√©es comme similaires ou en doublon
        - **molecules_fragments.csv:** Mol√©cules originales contenant des ions ou fragments multiples
        
        **Utilit√©:** Ces fichiers s√©par√©s permettent une analyse fine de chaque type de transformation et facilitent l'identification des probl√®mes potentiels dans les donn√©es d'entr√©e.
        """)
        
        st.subheader("Optimisation de la d√©tection des doublons")
        
        st.markdown("""
        ### Syst√®me hybride haute performance
        
        La nouvelle impl√©mentation utilise une approche hybride sophistiqu√©e pour maintenir des performances constantes quelle que soit la taille de votre biblioth√®que mol√©culaire:
        
        #### 1. Cache m√©moire intelligent
        - Maintient les 50 000 mol√©cules les plus r√©centes directement en m√©moire vive
        - Permet une v√©rification quasi-instantan√©e pour les mol√©cules r√©cemment trait√©es
        - Utilise une strat√©gie d'√©viction LRU (Least Recently Used) pour optimiser l'utilisation m√©moire
        
        #### 2. Base de donn√©es SQLite avec indexation
        - Stocke efficacement les empreintes des mol√©cules d√©j√† trait√©es
        - Utilise des index optimis√©s pour des recherches extr√™mement rapides
        - Fonctionne comme un dictionnaire persistant sans limite de taille
        
        #### 3. Hachage MD5 pour recherches ultrarapides
        - Transforme les SMILES canoniques en empreintes compactes et uniques
        - Permet des comparaisons bien plus rapides que sur les cha√Ænes compl√®tes
        - √âlimine les probl√®mes de performance li√©s √† la longueur des SMILES
        
        #### 4. Transactions optimis√©es
        - Regroupe les op√©rations d'√©criture dans des transactions
        - R√©duit drastiquement les acc√®s disque pour maintenir la performance
        - Garantit l'int√©grit√© des donn√©es m√™me en cas d'interruption
        """)
        
        st.subheader("FAQs")
        
        faq = {
            "Qu'est-ce qu'un SMILES canonique isom√©rique?": 
                "Le SMILES canonique isom√©rique est une repr√©sentation unique et standardis√©e d'une mol√©cule qui pr√©serve "
                "l'information st√©r√©ochimique (centres chiraux, g√©om√©trie des doubles liaisons). Pour une m√™me structure compl√®te "
                "(y compris la st√©r√©ochimie), il n'existe qu'un seul SMILES canonique isom√©rique.",
            
            "Comment sont d√©tect√©s les atomes sp√©ciaux?": 
                "L'application analyse chaque atome de la mol√©cule pour d√©tecter la pr√©sence d'isotopes "
                "(comme le deut√©rium ou le carbone-13) en v√©rifiant les propri√©t√©s d'isotope avec la m√©thode atom.GetIsotope() de RDKit. "
                "Si cette valeur est sup√©rieure √† z√©ro, l'atome est consid√©r√© comme un isotope sp√©cial.",
            
            "Comment fonctionne la s√©lection du plus grand fragment?":
                "Lorsqu'une mol√©cule contient plusieurs fragments non li√©s (comme dans un sel), l'application utilise Chem.GetMolFrags() "
                "pour identifier tous les fragments, puis s√©lectionne celui qui contient le plus grand nombre d'atomes, "
                "le consid√©rant comme le 'compos√© principal'.",
            
            "Comment fonctionne la suppression des sels?":
                "L'application utilise la fonctionnalit√© SaltRemover de RDKit qui identifie et s√©pare les "
                "contre-ions et les mol√©cules de solvant de la structure principale. Cette classe utilise une liste pr√©d√©finie "
                "de fragments correspondant aux sels et solvants courants pour les identifier et les retirer.",
            
            "Quels sont les atomes consid√©r√©s comme 'non m√©dicinaux'?":
                "Les atomes exotiques sont ceux rarement pr√©sents dans les petites mol√©cules m√©dicamenteuses (ceux qui marchent dans le docking). "
                "Seuls C, H, O, N, S, P, F, Cl, Br et I sont consid√©r√©s comme acceptables. "
                "Toutes les mol√©cules poss√©dant les autres √©l√©ments sont filtr√©s.",
            
            "Comment traiter des biblioth√®ques de plusieurs millions de mol√©cules?":
                "L'application utilise un syst√®me hybride optimis√© qui combine un cache m√©moire intelligent et une base de donn√©es SQLite "
                "avec indexation. Cette approche maintient des performances constantes quelle que soit la taille de la biblioth√®que, "
                "sans ralentissement, m√™me pour des dizaines de millions de mol√©cules. Le traitement par lots et l'√©criture progressive "
                "des r√©sultats assurent une utilisation efficace des ressources.",
            
            "Est-ce que SQLite n√©cessite une installation s√©par√©e?":
                "Non, SQLite est inclus dans la biblioth√®que standard de Python et ne n√©cessite aucune installation suppl√©mentaire. "
                "La base de donn√©es SQLite est temporaire, cr√©√©e localement pendant le traitement, et supprim√©e automatiquement √† la fin. "
                "Aucune donn√©e n'est jamais envoy√©e sur un serveur externe, tout reste sur votre machine.",
            
            "Pourquoi la d√©tection des doublons est-elle maintenant beaucoup plus rapide?":
                "La nouvelle impl√©mentation utilise une approche en trois niveaux: un cache m√©moire pour les mol√©cules r√©centes, "
                "un index optimis√© dans SQLite, et un hachage MD5 des SMILES pour des recherches ultrarapides. "
                "Cette combinaison offre des performances de recherche quasi-constantes, quelle que soit la taille de la biblioth√®que.",
            
            "La d√©tection des doublons est-elle toujours fiable avec de tr√®s grands jeux de donn√©es?":
                "Oui, le syst√®me hybride garantit une d√©tection fiable et pr√©cise des doublons, m√™me pour des dizaines de millions de mol√©cules. "
                "L'utilisation de hachage MD5 et d'index optimis√©s assure l'int√©grit√© des r√©sultats, et les transactions SQL prot√®gent contre "
                "la corruption des donn√©es en cas d'interruption.",
            
            "O√π sont enregistr√©s les fichiers de sortie?":
                "Les fichiers sont sauvegard√©s directement dans un dossier nomm√© 'cleanchem_results' dans le r√©pertoire courant. "
                "Ce dossier contient tous les fichiers .csv g√©n√©r√©s durant le traitement, qui sont disponibles imm√©diatement apr√®s la fin du processus."
        }
        
        for question, answer in faq.items():
            with st.expander(question):
                st.write(answer)
        
        st.subheader("Ressources suppl√©mentaires")
        
        st.markdown("""
        - [Documentation RDKit](https://www.rdkit.org/docs/index.html)
        - [Documentation Streamlit](https://docs.streamlit.io/)
        - [Tutoriel SMILES](https://www.daylight.com/dayhtml/doc/theory/theory.smiles.html)
        - [Documentation SQLite](https://docs.python.org/3/library/sqlite3.html)
        - [Optimisation m√©moire Python](https://docs.python.org/3/library/gc.html)
        """)
        
        # Footer
        st.write("---")
        st.caption("Youcef ---- D√©velopp√© avec RDKit et Streamlit | ¬© 2025 | Optimis√© pour le traitement de grandes biblioth√®ques")
if __name__ == "__main__":
    main()
